// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

// Define the user model
model User {
  id        String     @id @default(cuid()) @map("_id")
  email     String     @unique
  password  String
  firstName String
  lastName  String
  address   Address[]
  phone     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  // Relationships
  orders    Order[]
  cartItems CartItem[]
}

// Define the address model
model Address {
  id         String   @id @default(cuid()) @map("_id")
  street     String
  city       String
  state      String
  postalCode String
  country    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // Relationships
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

// Define the category model
model Category {
  id        String    @id @default(cuid()) @map("_id")
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Relationships
  products  Product[]
}

// Define the product model
model Product {
  id          String      @id @default(cuid()) @map("_id")
  name        String
  description String
  price       Float
  image       String
  stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  // Relationships
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

// Define the cart item model
model CartItem {
  id        String   @id @default(cuid()) @map("_id")
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

// Define the order model
model Order {
  id         String      @id @default(cuid()) @map("_id")
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  // Relationships
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  orderItems OrderItem[]
}

// Define the order item model
model OrderItem {
  id        String   @id @default(cuid()) @map("_id")
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relationships
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}
